{"version":3,"file":"static/js/705.c4b344d1.chunk.js","mappings":"kQAyBaA,EAAb,0CAME,yCACE,gBACAC,EAAAA,EAAAA,MAAmBC,MAAK,SAAAC,GACtB,GAAKA,EAAL,CAGA,IAAMC,GAAYC,EAAAA,EAAAA,OAClBC,EAAAA,EAAAA,IAAUF,GAAW,SAAAG,GAAO,OAAI,EAAKC,2BAA2BD,EAApC,GAF3B,CAGF,IARH,CASC,CAfH,wFAiBS,gGACCE,EAAUC,KAAKC,+CACnBC,aAAaC,YAFV,kBAIE,CACLJ,QAAAA,IALG,gDAjBT,+HA0BS,2GACgCG,aAAaE,oBAD7C,cACCC,EADD,OAECN,EAAUC,KAAKC,+CACnBI,GAHG,kBAKE,CACLN,QAAAA,IANG,gDA1BT,wHAoCS,0GACqBR,EAAAA,EAAAA,MADrB,cACCe,EADD,yBAEE,CACLA,YAAAA,IAHG,2CApCT,qHA2CS,WAAeC,GAAf,qFACCb,GAAYC,EAAAA,EAAAA,MADb,UAEea,EAAAA,EAAAA,IAASd,EAAW,CACtCe,SAAUF,EAAQE,SAClBC,0BAA2BH,EAAQG,4BAJhC,cAECC,EAFD,yBAME,CACLA,MAAAA,IAPG,2CA3CT,yHAsDS,gGACCjB,GAAYC,EAAAA,EAAAA,MADb,UAECiB,EAAAA,EAAAA,IAAYlB,GAFb,2CAtDT,sIA2DS,mFACLM,KAAKa,wBADA,gDA3DT,yIA+DS,WACLC,GADK,sEAGLd,KAAKa,wBAHA,gDA/DT,6IAqES,mFACLb,KAAKa,wBADA,gDArET,6HAyES,WACLC,GADK,sEAGLd,KAAKa,wBAHA,gDAzET,kIA+ES,WACLC,GADK,sEAGLd,KAAKa,wBAHA,gDA/ET,+FAqFU,SAA2BE,GACjC,IACMC,EAAmC,CACvCC,aAFmBjB,KAAKkB,yBAAyBH,IAInDf,KAAKmB,gBAAgB7B,EAAqB8B,0BAA2BJ,EACtE,GA3FH,sCA6FU,SACND,G,UASA,MAPmC,CACjCM,KAAiC,QAA7B,EAAEN,EAAeE,oBAAYK,IAAAA,OAAA,EAAAA,EAAED,KACnCE,KAAMR,EAAeQ,KACrBC,GAAIT,EAAeU,UACnBC,MAAkC,QAA7B,EAAEX,EAAeE,oBAAYU,IAAAA,OAAA,EAAAA,EAAED,MACpCE,MAAkC,QAA7B,EAAEb,EAAeE,oBAAYY,IAAAA,OAAA,EAAAA,EAAED,MAGvC,GAxGH,4DA0GU,SACNzB,GAEA,IAAI2B,EAAyB,SAC7B,OAAQ3B,GACN,IAAK,UACH2B,EAAQ,UACR,MACF,IAAK,SACHA,EAAQ,SAGZ,OAAOA,CACR,GAvHH,mCAyHU,WACN,MAAM9B,KAAK+B,YAAY,wBACxB,KA3HH,GACUC,EAAAA,IAGe1C,EAAAA,0BAA4B,sB","sources":["../node_modules/@capacitor-firebase/messaging/src/web.ts"],"sourcesContent":["import type { PermissionState } from '@capacitor/core';\nimport { WebPlugin } from '@capacitor/core';\nimport type { MessagePayload } from 'firebase/messaging';\nimport {\n  deleteToken,\n  getMessaging,\n  getToken,\n  isSupported as isSupportedInWeb,\n  onMessage,\n} from 'firebase/messaging';\n\nimport type {\n  FirebaseMessagingPlugin,\n  GetDeliveredNotificationsResult,\n  GetTokenOptions,\n  GetTokenResult,\n  IsSupportedResult,\n  NotificationReceivedEvent,\n  PermissionStatus,\n  RemoveDeliveredNotificationsOptions,\n  SubscribeToTopicOptions,\n  UnsubscribeFromTopicOptions,\n} from './definitions';\nimport { Notification } from './definitions';\n\nexport class FirebaseMessagingWeb\n  extends WebPlugin\n  implements FirebaseMessagingPlugin\n{\n  public static readonly notificationReceivedEvent = 'notificationReceived';\n\n  constructor() {\n    super();\n    isSupportedInWeb().then(supported => {\n      if (!supported) {\n        return;\n      }\n      const messaging = getMessaging();\n      onMessage(messaging, payload => this.handleNotificationReceived(payload));\n    });\n  }\n\n  public async checkPermissions(): Promise<PermissionStatus> {\n    const receive = this.convertNotificationPermissionToPermissionState(\n      Notification.permission,\n    );\n    return {\n      receive,\n    };\n  }\n\n  public async requestPermissions(): Promise<PermissionStatus> {\n    const notificationPermission = await Notification.requestPermission();\n    const receive = this.convertNotificationPermissionToPermissionState(\n      notificationPermission,\n    );\n    return {\n      receive,\n    };\n  }\n\n  public async isSupported(): Promise<IsSupportedResult> {\n    const isSupported = await isSupportedInWeb();\n    return {\n      isSupported,\n    };\n  }\n\n  public async getToken(options: GetTokenOptions): Promise<GetTokenResult> {\n    const messaging = getMessaging();\n    const token = await getToken(messaging, {\n      vapidKey: options.vapidKey,\n      serviceWorkerRegistration: options.serviceWorkerRegistration,\n    });\n    return {\n      token,\n    };\n  }\n\n  public async deleteToken(): Promise<void> {\n    const messaging = getMessaging();\n    await deleteToken(messaging);\n  }\n\n  public async getDeliveredNotifications(): Promise<GetDeliveredNotificationsResult> {\n    this.throwUnavailableError();\n  }\n\n  public async removeDeliveredNotifications(\n    _options: RemoveDeliveredNotificationsOptions,\n  ): Promise<void> {\n    this.throwUnavailableError();\n  }\n\n  public async removeAllDeliveredNotifications(): Promise<void> {\n    this.throwUnavailableError();\n  }\n\n  public async subscribeToTopic(\n    _options: SubscribeToTopicOptions,\n  ): Promise<void> {\n    this.throwUnavailableError();\n  }\n\n  public async unsubscribeFromTopic(\n    _options: UnsubscribeFromTopicOptions,\n  ): Promise<void> {\n    this.throwUnavailableError();\n  }\n\n  private handleNotificationReceived(messagePayload: MessagePayload): void {\n    const notification = this.createNotificationResult(messagePayload);\n    const event: NotificationReceivedEvent = {\n      notification,\n    };\n    this.notifyListeners(FirebaseMessagingWeb.notificationReceivedEvent, event);\n  }\n\n  private createNotificationResult(\n    messagePayload: MessagePayload,\n  ): Notification {\n    const notification: Notification = {\n      body: messagePayload.notification?.body,\n      data: messagePayload.data,\n      id: messagePayload.messageId,\n      image: messagePayload.notification?.image,\n      title: messagePayload.notification?.title,\n    };\n    return notification;\n  }\n\n  private convertNotificationPermissionToPermissionState(\n    permission: NotificationPermission,\n  ) {\n    let state: PermissionState = 'prompt';\n    switch (permission) {\n      case 'granted':\n        state = 'granted';\n        break;\n      case 'denied':\n        state = 'denied';\n        break;\n    }\n    return state;\n  }\n\n  private throwUnavailableError(): never {\n    throw this.unavailable('Not available on web.');\n  }\n}\n"],"names":["FirebaseMessagingWeb","isSupportedInWeb","then","supported","messaging","getMessaging","onMessage","payload","handleNotificationReceived","receive","this","convertNotificationPermissionToPermissionState","Notification","permission","requestPermission","notificationPermission","isSupported","options","getToken","vapidKey","serviceWorkerRegistration","token","deleteToken","throwUnavailableError","_options","messagePayload","event","notification","createNotificationResult","notifyListeners","notificationReceivedEvent","body","_a","data","id","messageId","image","_b","title","_c","state","unavailable","WebPlugin"],"sourceRoot":""}